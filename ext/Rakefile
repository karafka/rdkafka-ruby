require File.expand_path('../../lib/rdkafka/version', __FILE__)
require "mini_portile2"
require "fileutils"

task :default => :clean do
  # MiniPortile#download_file_http is a monkey patch that removes the download
  # progress indicator. This indicator relies on the 'Content Length' response
  # headers, which is not set by GitHub
  class MiniPortile
    def download_file_http(url, full_path, _count)
      filename = File.basename(full_path)
      with_tempfile(filename, full_path) do |temp_file|
        params = { 'Accept-Encoding' => 'identity' }
        OpenURI.open_uri(url, 'rb', params) do |io|
          temp_file.write(io.read)
        end
        output
      end
    end
  end

  # Download and compile librdkafka
  recipe = MiniPortile.new("librdkafka", Rdkafka::LIBRDKAFKA_VERSION)

  # Use default homebrew openssl if we're on mac and the directory exists
  if recipe.host.include?("darwin") && Dir.exists?("/usr/local/opt/openssl")
    ENV["CPPFLAGS"] = "-I/usr/local/opt/openssl/include"
    ENV["LDFLAGS"] = "-L/usr/local/opt/openssl/lib"
  end

  recipe.files << {
    :url => "https://codeload.github.com/confluentinc/librdkafka/zip/v#{Rdkafka::LIBRDKAFKA_VERSION}",
    :sha256 => Rdkafka::LIBRDKAFKA_SOURCE_SHA256
  }
  recipe.patch_files.concat Dir[File.join(File.dirname(__FILE__), "patches/*")]
  recipe.configure_options = ["--host=#{recipe.host}"]
  recipe.cook
  # Move dynamic library we're interested in
  if recipe.host.include?('darwin')
    from_extension = '1.dylib'
    to_extension   = 'dylib'
  else
    from_extension = 'so.1'
    to_extension = 'so'
  end
  lib_path = File.join(File.dirname(__FILE__), "ports/#{recipe.host}/librdkafka/#{Rdkafka::LIBRDKAFKA_VERSION}/lib/librdkafka.#{from_extension}")
  FileUtils.mv(lib_path, File.join(File.dirname(__FILE__), "librdkafka.#{to_extension}"))
  # Cleanup files created by miniportile we don't need in the gem
  FileUtils.rm_rf File.join(File.dirname(__FILE__), "tmp")
  FileUtils.rm_rf File.join(File.dirname(__FILE__), "ports")
end

task :clean do
  FileUtils.rm_f File.join(File.dirname(__FILE__), "librdkafka.dylib")
  FileUtils.rm_f File.join(File.dirname(__FILE__), "librdkafka.so")
  FileUtils.rm_rf File.join(File.dirname(__FILE__), "ports")
  FileUtils.rm_rf File.join(File.dirname(__FILE__), "tmp")
end
